AWS::CodeBuild::Project Artifacts == {"Location":"CodeBuildArtifacts","Name":"nginx-config.zip","NamespaceType":"BUILD_ID","Packaging":"ZIP","Path":"codebuild","Type":"S3"}
AWS::CodeBuild::Project Description == Building NGINX Plus configuration
AWS::CodeBuild::Project Environment == {"ComputeType":"BUILD_GENERAL1_SMALL","Image":"aws/codebuild/amazonlinux2-x86_64-standard:3.0","Type":"LINUX_CONTAINER"}
AWS::CodeBuild::Project LogsConfig == {"CloudWatchLogs":{"Status":"DISABLED"}}
AWS::CodeBuild::Project ServiceRole == CodeBuildRole.Arn
AWS::CodeBuild::Project Source == {"Location":"CodeCommitRepository.CloneUrlHttp","Type":"CODECOMMIT"}
AWS::CodeBuild::Project Tags == [{"Key":"costcenter","Value":"cost"},{"Key":"environment","Value":"environment"},{"Key":"group","Value":"group"},{"Key":"Name","Value":"${uniqueString}-codebuid"},{"Key":"owner","Value":"owner"}]
AWS::CodeBuild::Project TimeoutInMinutes == 10
AWS::CodeCommit::Repository Code == {"BranchName":"main","S3":{"Bucket":"initialRepositoryS3Bucket","Key":"initialRepositoryS3Key"}}
AWS::CodeCommit::Repository RepositoryDescription == This is a repository for NGINX Plus pipeline configuration.
AWS::CodeCommit::Repository RepositoryName == ${uniqueString}-repository
AWS::CodeCommit::Repository Tags == [{"Key":"costcenter","Value":"cost"},{"Key":"environment","Value":"environment"},{"Key":"group","Value":"group"},{"Key":"Name","Value":"${uniqueString}-repository"},{"Key":"owner","Value":"owner"}]
AWS::CodeDeploy::Application ApplicationName == ${uniqueString}-application
AWS::CodeDeploy::Application ComputePlatform == Server
AWS::CodeDeploy::DeploymentConfig DeploymentConfigName == ${uniqueString}-config
AWS::CodeDeploy::DeploymentConfig MinimumHealthyHosts == {"Type":"FLEET_PERCENT","Value":50}
AWS::CodeDeploy::DeploymentGroup ApplicationName == CodeDeployApplication
AWS::CodeDeploy::DeploymentGroup AutoScalingGroups == autoScalingGroupList
AWS::CodeDeploy::DeploymentGroup DeploymentConfigName == CodeDeployDeploymentConfig
AWS::CodeDeploy::DeploymentGroup DeploymentGroupName == ${uniqueString}-group
AWS::CodeDeploy::DeploymentGroup DeploymentStyle == {"DeploymentOption":"WITH_TRAFFIC_CONTROL"}
AWS::CodeDeploy::DeploymentGroup LoadBalancerInfo == {"TargetGroupInfoList":[{"Name":"targetGroupName"}]}
AWS::CodeDeploy::DeploymentGroup ServiceRoleArn == CodeDeployRole.Arn
AWS::CodePipeline::Pipeline ArtifactStore == {"Location":"CodeBuildArtifacts","Type":"S3"}
AWS::CodePipeline::Pipeline Name == ${uniqueString}-pipeline
AWS::CodePipeline::Pipeline RoleArn == PipelineRole.Arn
AWS::CodePipeline::Pipeline Stages == [{"Actions":[{"ActionTypeId":{"Category":"Source","Owner":"AWS","Provider":"CodeCommit","Version":"1"},"Configuration":{"BranchName":"main","PollForSourceChanges":true,"RepositoryName":"CodeCommitRepository.Name"},"InputArtifacts":[],"Name":"SourceAction","OutputArtifacts":[{"Name":"${uniqueString}-source-artifact"}],"RunOrder":1}],"Name":"Source"},{"Actions":[{"ActionTypeId":{"Category":"Build","Owner":"AWS","Provider":"CodeBuild","Version":"1"},"Configuration":{"ProjectName":"CodeBuild"},"InputArtifacts":[{"Name":"${uniqueString}-source-artifact"}],"Name":"BuildAction","OutputArtifacts":[{"Name":"${uniqueString}-build-artifact"}],"RunOrder":1}],"Name":"Build"},{"Actions":[{"ActionTypeId":{"Category":"Deploy","Owner":"AWS","Provider":"CodeDeploy","Version":"1"},"Configuration":{"ApplicationName":"CodeDeployApplication","DeploymentGroupName":"CodeDeployDeploymentGroup"},"InputArtifacts":[{"Name":"${uniqueString}-build-artifact"}],"Name":"DeployAction","RunOrder":1}],"Name":"Deploy"}]
AWS::CodePipeline::Pipeline Tags == [{"Key":"costcenter","Value":"cost"},{"Key":"environment","Value":"environment"},{"Key":"group","Value":"group"},{"Key":"Name","Value":"${uniqueString}-pipeline"},{"Key":"owner","Value":"owner"}]
AWS::IAM::Policy PolicyDocument == {"Statement":[{"Action":["s3:GetObject","s3:GetObjectVersion","s3:GetBucketVersioning"],"Effect":"Allow","Resource":["arn:aws:s3:::${CodeBuildArtifacts}","arn:aws:s3:::${CodeBuildArtifacts}/*"]}],"Version":"2012-10-17"}
AWS::IAM::Policy PolicyName == ${uniqueString}-codebuild-policy
AWS::IAM::Policy Roles == ["instanceIAMRole"]
AWS::IAM::Role AssumeRolePolicyDocument == {"Statement":[{"Action":["sts:AssumeRole"],"Effect":"Allow","Principal":{"Service":["codebuild.amazonaws.com"]}}],"Version":"2012-10-17"} |OR| AWS::IAM::Role AssumeRolePolicyDocument == {"Statement":[{"Action":["sts:AssumeRole"],"Effect":"Allow","Principal":{"Service":["codedeploy.amazonaws.com"]}}]} |OR| AWS::IAM::Role AssumeRolePolicyDocument == {"Statement":[{"Action":["sts:AssumeRole"],"Effect":"Allow","Principal":{"Service":["codepipeline.amazonaws.com"]}}]} |OR| AWS::IAM::Role AssumeRolePolicyDocument == {"Statement":[{"Action":["sts:AssumeRole"],"Effect":"Allow","Principal":{"Service":["lambda.amazonaws.com"]}}]}
AWS::IAM::Role Path == /
AWS::IAM::Role Policies == [{"PolicyDocument":{"Statement":[{"Action":["autoscaling:CompleteLifecycleAction","autoscaling:DeleteLifecycleHook","autoscaling:PutLifecycleHook","autoscaling:RecordLifecycleActionHeartbeat"],"Effect":"Allow","Resource":["arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*"]},{"Action":["ec2:DescribeInstances","ec2:DescribeInstanceStatus","autoscaling:DescribeAutoScalingGroups","autoscaling:DescribeLifecycleHooks","elasticloadbalancing:RegisterTargets","elasticloadbalancing:DeregisterTargets","elasticloadbalancing:Describe*"],"Effect":"Allow","Resource":"*"}],"Version":"2012-10-17"},"PolicyName":"${uniqueString}-code-deploy-policy"}] |OR| AWS::IAM::Role Policies == [{"PolicyDocument":{"Statement":[{"Action":["codecommit:CancelUploadArchive","codecommit:GetBranch","codecommit:GetCommit","codecommit:GetUploadArchiveStatus","codecommit:UploadArchive"],"Effect":"Allow","Resource":["arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${CodeCommitRepository.Name}"]},{"Action":["codebuild:StartBuild","codebuild:BatchGetBuilds","codebuild:StopBuild"],"Effect":"Allow","Resource":["CodeBuild.Arn"]},{"Action":["codedeploy:CreateDeployment","codedeploy:GetApplicationRevision","codedeploy:GetDeployment","codedeploy:GetDeploymentConfig","codedeploy:RegisterApplicationRevision"],"Effect":"Allow","Resource":["arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:${CodeDeployApplication}/${CodeDeployDeploymentGroup}","arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:application:${CodeDeployApplication}","arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentconfig:*"]},{"Action":["s3:GetObject","s3:GetObjectVersion","s3:GetBucketVersioning","s3:PutObject"],"Effect":"Allow","Resource":["arn:aws:s3:::${CodeBuildArtifacts}","arn:aws:s3:::${CodeBuildArtifacts}/*"]}],"Version":"2012-10-17"},"PolicyName":"${uniqueString}-pipeline-policy"}] |OR| AWS::IAM::Role Policies == [{"PolicyDocument":{"Statement":[{"Action":["s3:List*","s3:GetObject","s3:GetObjectVersion","s3:GetBucketVersioning","s3:PutObject"],"Effect":"Allow","Resource":["arn:aws:s3:::${CodeBuildArtifacts}","arn:aws:s3:::${CodeBuildArtifacts}/*"]}],"Version":"2012-10-17"},"PolicyName":"${uniqueString}-code-build-policy"}] |OR| AWS::IAM::Role Policies == [{"PolicyDocument":{"Statement":[{"Action":["s3:ListBucket","s3:ListBucketVersions","s3:GetObject","s3:GetObjectVersion","s3:GetBucketVersioning","s3:DeleteObject","s3:DeleteObjectVersion"],"Effect":"Allow","Resource":["arn:aws:s3:::${CodeBuildArtifacts}","arn:aws:s3:::${CodeBuildArtifacts}/*"]}],"Version":"2012-10-17"},"PolicyName":"${uniqueString}-cleanup-policy"}]
AWS::IAM::Role Tags == [{"Key":"Name","Value":"${uniqueString}-cleanup-role"},{"Key":"costcenter","Value":"cost"},{"Key":"environment","Value":"environment"},{"Key":"group","Value":"group"},{"Key":"owner","Value":"owner"}] |OR| AWS::IAM::Role Tags == [{"Key":"Name","Value":"${uniqueString}-code-build-role"},{"Key":"costcenter","Value":"cost"},{"Key":"environment","Value":"environment"},{"Key":"group","Value":"group"},{"Key":"owner","Value":"owner"}] |OR| AWS::IAM::Role Tags == [{"Key":"Name","Value":"${uniqueString}-code-deploy-role"},{"Key":"costcenter","Value":"cost"},{"Key":"environment","Value":"environment"},{"Key":"group","Value":"group"},{"Key":"owner","Value":"owner"}] |OR| AWS::IAM::Role Tags == [{"Key":"Name","Value":"${uniqueString}-pipeline-role"},{"Key":"costcenter","Value":"cost"},{"Key":"environment","Value":"environment"},{"Key":"group","Value":"group"},{"Key":"owner","Value":"owner"}]
AWS::Lambda::Function Code == {"ZipFile":"import json, boto3, logging\nimport cfnresponse\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\ndef lambda_handler(event, context):\n    logger.info(\"event: {}\".format(event))\n    try:\n        bucket = event['ResourceProperties']['BucketName']\n        logger.info(\"bucket: {}, event['RequestType']: {}\".format(bucket,event['RequestType']))\n        if event['RequestType'] == 'Delete':\n            s3 = boto3.resource('s3')\n            bucket = s3.Bucket(bucket)\n            for obj in bucket.objects.filter():\n                logger.info(\"delete obj: {}\".format(obj))\n                s3.Object(bucket.name, obj.key).delete()\n            bucket.object_versions.all().delete()\n        sendResponseCfn(event, context, cfnresponse.SUCCESS)\n    except Exception as e:\n        logger.info(\"Exception: {}\".format(e))\n        sendResponseCfn(event, context, cfnresponse.FAILED)\n\ndef sendResponseCfn(event, context, responseStatus):\n    responseData = {}\n    responseData['Data'] = {}\n    cfnresponse.send(event, context, responseStatus, responseData, \"CustomResourcePhysicalID\")              \n"}
AWS::Lambda::Function Handler == index.lambda_handler
AWS::Lambda::Function MemorySize == 128
AWS::Lambda::Function Role == CleanupBucketRole.Arn
AWS::Lambda::Function Runtime == python3.7
AWS::Lambda::Function Tags == [{"Key":"costcenter","Value":"cost"},{"Key":"environment","Value":"environment"},{"Key":"group","Value":"group"},{"Key":"Name","Value":"${uniqueString}-cleanup-lambda"},{"Key":"owner","Value":"owner"}]
AWS::Lambda::Function Timeout == 60
AWS::S3::Bucket Tags == [{"Key":"costcenter","Value":"cost"},{"Key":"environment","Value":"environment"},{"Key":"group","Value":"group"},{"Key":"Name","Value":"${uniqueString}-codebuild-artifacts"},{"Key":"owner","Value":"owner"}]
AWS::S3::Bucket VersioningConfiguration == {"Status":"Enabled"}
Custom::cleanupbucket BucketName == CodeBuildArtifacts
Custom::cleanupbucket ServiceToken == CleanupBucketOnDeleteFunction.Arn
