AWS::CloudWatch::Dashboard DashboardBody == {  "widgets": [    {      "height": 6,      "width": 15,      "y": 0,      "x": 3,      "type": "log",      "properties": {        "query": "SOURCE \"${LogGroup}\" | fields @timestamp, @message\n| filter @logStream like /security.log$/\n| parse @message \"request_status=\\\"alerted\\\"\" as alerted_requests\n| parse @message \"request_status=\\\"blocked\\\"\" as blocked_requests\n| parse @message \"request_status=\\\"passed\\\"\" as passed_requests\n| sort @timestamp desc\n| stats count(alerted_requests) as alerted, count(blocked_requests) as blocked, count(passed_requests) as passed by bin(5m)",        "region": "${AWS::Region}",        "stacked": true,        "view": "timeSeries",        "title": "NAP Requests"      }    },    {      "height": 6,      "width": 6,      "y": 0,      "x": 18,      "type": "log",      "properties": {        "query": "SOURCE \"${LogGroup}\" | fields @timestamp, @message\n| filter @logStream like /security.log$/\n| parse @message /request_status=\"(?<request_status>.*?)\"/\n| sort @timestamp desc\n| stats count(*) as requests by request_status",        "region": "${AWS::Region}",        "stacked": false,        "view": "pie",        "title": "Total Requests"      }    },    {      "height": 6,      "width": 6,      "y": 6,      "x": 0,      "type": "metric",      "properties": {        "view": "timeSeries",        "stacked": true,        "metrics": [          [            "AWS/EC2",            "CPUUtilization",            "AutoScalingGroupName",            "${autoScalingGroup}"          ]        ],        "region": "${AWS::Region}"      }    },    {      "height": 6,      "width": 6,      "y": 6,      "x": 6,      "type": "metric",      "properties": {        "view": "timeSeries",        "stacked": true,        "metrics": [          [            "AWS/EC2",            "NetworkIn",            "AutoScalingGroupName",            "${autoScalingGroup}"          ],          [            ".",            "NetworkOut",            ".",            "."          ]        ],        "region": "${AWS::Region}"      }    },    {      "height": 12,      "width": 24,      "y": 12,      "x": 0,      "type": "log",      "properties": {        "query": "SOURCE \"${LogGroup}\" | fields @timestamp, @message\n| filter @logStream like /security.log$/ \n| parse @message /attack_type=\\\"(?<attack_type>.*?)\\\",(?<part1>.*?),ip_client=\\\"(?<ip_client>.*?)\\\",(?<part2>.*?),request_status=\\\"(?<request_status>.*?)\\\",(?<part3>.*?),sub_violations=\\\"(?<sub_violations>.*?)\\\",support_id=\\\"(?<support_id>.*?)\\\",/ \n| filter request_status in [\"blocked\", \"alerted\"]\n| display @timestamp, request_status, attack_type, ip_client, sub_violations, support_id\n| sort @timestamp desc\n| limit 20",        "region": "${AWS::Region}",        "stacked": false,        "view": "table",        "title": "Alerts Log"      }    },    {      "height": 3,      "width": 3,      "y": 0,      "x": 0,      "type": "metric",      "properties": {        "view": "singleValue",        "metrics": [          [            "AWS/AutoScaling",            "GroupTotalInstances",            "AutoScalingGroupName",            "${autoScalingGroup}"          ]        ],        "region": "${AWS::Region}",        "title": "Total Instances"      }    },    {      "height": 3,      "width": 3,      "y": 3,      "x": 0,      "type": "metric",      "properties": {        "view": "singleValue",        "metrics": [          [            "AWS/NetworkELB",            "HealthyHostCount",            "TargetGroup",            "${targetGroupFullName}",            "LoadBalancer",            "${loadBalancerFullName}"          ]        ],        "region": "${AWS::Region}",        "title": "Healthy Instances"      }    },    {      "type": "log",      "x": 12,      "y": 6,      "width": 6,      "height": 6,      "properties": {        "query": "SOURCE \"${LogGroup}\" | fields @timestamp, @message\n| filter @logStream like /security.log$/\n| parse @message \"response_code=\\\"*\\\"\" as response_code\n| filter response_code > 0\n| stats count(response_code) as code by response_code",        "region": "${AWS::Region}",        "stacked": false,        "title": "Response Codes",        "view": "bar"      }    },    {      "type": "log",      "x": 18,      "y": 6,      "width": 6,      "height": 6,      "properties": {        "query": "SOURCE \"${LogGroup}\" | fields @timestamp, @message\n| filter @logStream like /security.log$/ \n| parse @message /ip_client=\\\"(?<ip_client>.*?)\\\",(?<part2>.*?),request_status=\\\"(?<request_status>.*?)\\\",/ \n| filter request_status in [\"blocked\", \"alerted\"]\n| stats count(ip_client) as count by ip_client as ip\n| sort count desc\n| limit 10",        "region": "${AWS::Region}",        "stacked": false,        "title": "Top Attackers",        "view": "table"      }    }  ]}
AWS::CloudWatch::Dashboard DashboardName == ${uniqueString}-dashboard
AWS::IAM::Policy PolicyDocument == {"Statement":[{"Action":["logs:PutLogEvents","logs:DescribeLogStreams","logs:DescribeLogGroups","logs:CreateLogStream","logs:CreateLogGroup"],"Effect":"Allow","Resource":[[":",["arn","aws","logs","AWS::Region","AWS::AccountId","log-group","LogGroup","*"]]]},{"Action":["cloudwatch:PutMetricData"],"Effect":"Allow","Resource":"*"}],"Version":"2012-10-17"}
AWS::IAM::Policy PolicyName == ${uniqueString}-logs-policy
AWS::IAM::Policy Roles == ["instanceIAMRole"]
AWS::Logs::LogGroup LogGroupName == ["useDefaultLogGroupName","${uniqueString}-log-group","logGroupName"]
AWS::Logs::LogGroup RetentionInDays == logRetentionInDays
